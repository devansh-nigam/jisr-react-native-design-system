import {Easing} from 'react-native';

/**
 * @typedef {typeof dimensionPaths} DimensionPaths - All the valid paths for the tokens of type dimension.
 * To use this type you can do: `@type {import('path/to/myTokensFile').DimensionPaths}`
 */
export const dimensionPaths = /** @type {const} */ ([
  'alias.spacing.component.3xl',
  'primitive.spacing.scale.12',
  'alias.spacing.component.4xl',
  'primitive.spacing.scale.16',
  'alias.spacing.component.lg',
  'primitive.spacing.scale.6',
  'alias.spacing.component.md',
  'primitive.spacing.scale.4',
  'alias.spacing.component.sm',
  'primitive.spacing.scale.3',
  'alias.spacing.component.xl',
  'primitive.spacing.scale.8',
  'alias.spacing.component.xs',
  'primitive.spacing.scale.2',
  'alias.spacing.component.xxs',
  'primitive.spacing.scale.1',
  'alias.spacing.component.2xl',
  'primitive.spacing.scale.10',
  'alias.spacing.section.lg',
  'primitive.spacing.scale.32',
  'alias.spacing.section.md',
  'primitive.spacing.scale.24',
  'alias.spacing.section.sm',
  'alias.spacing.section.xl',
  'primitive.spacing.scale.48',
  'primitive.size.container.max',
  'primitive.size.container.md',
  'primitive.size.container.sm',
  'primitive.size.container.xl',
  'primitive.size.container.xs',
  'primitive.size.container.2xl',
  'primitive.size.container.lg',
  'primitive.size.icon.lg',
  'primitive.size.icon.md',
  'primitive.size.icon.sm',
  'primitive.size.icon.xl',
  'primitive.size.icon.xs',
  'primitive.size.component.lg',
  'primitive.size.component.md',
  'primitive.size.component.sm',
  'primitive.size.component.xl',
  'primitive.size.component.xs',
  'primitive.spacing.scale.0',
  'primitive.spacing.scale.5',
  'primitive.spacing.scale.20',
  'primitive.spacing.scale.40',
  'primitive.spacing.scale.56',
  'primitive.spacing.scale.64',
  'primitive.spacing.layout.desktop.x',
  'primitive.spacing.layout.desktop.y',
  'primitive.spacing.layout.mobile.x',
  'primitive.spacing.layout.mobile.y',
  'primitive.spacing.layout.tablet.x',
  'primitive.spacing.layout.tablet.y',
  'primitive.typography.fontSize.2xl',
  'primitive.typography.fontSize.3xl',
  'primitive.typography.fontSize.4xl',
  'primitive.typography.fontSize.5xl',
  'primitive.typography.fontSize.6xl',
  'primitive.typography.fontSize.7xl',
  'primitive.typography.fontSize.8xl',
  'primitive.typography.fontSize.lg',
  'primitive.typography.fontSize.md',
  'primitive.typography.fontSize.sm',
  'primitive.typography.fontSize.xl',
  'primitive.typography.fontSize.xs',
  'primitive.typography.fontWeight.bold',
  'primitive.typography.fontWeight.medium',
  'primitive.typography.fontWeight.regular',
  'primitive.typography.fontWeight.semibold',
  'primitive.typography.letterSpacing.normal',
  'primitive.typography.letterSpacing.tight',
  'primitive.typography.letterSpacing.tighter',
  'primitive.typography.letterSpacing.wide',
  'primitive.typography.letterSpacing.wider',
  'primitive.borderRadius.2xl',
  'primitive.borderRadius.3xl',
  'primitive.borderRadius.full',
  'primitive.borderRadius.lg',
  'primitive.borderRadius.md',
  'primitive.borderRadius.none',
  'primitive.borderRadius.sm',
  'primitive.borderRadius.xl',
  'primitive.borderRadius.xs',
  'primitive.borderWidth.lg',
  'primitive.borderWidth.md',
  'primitive.borderWidth.none',
  'primitive.borderWidth.sm',
  'primitive.borderWidth.xs',
  'primitive.opacity.0',
  'primitive.opacity.5',
  'primitive.opacity.10',
  'primitive.opacity.20',
  'primitive.opacity.30',
  'primitive.opacity.40',
  'primitive.opacity.50',
  'primitive.opacity.60',
  'primitive.opacity.70',
  'primitive.opacity.80',
  'primitive.opacity.90',
  'primitive.opacity.95',
  'primitive.opacity.100',
]);
/**
 * @typedef {typeof colorPaths} ColorPaths - All the valid paths for the tokens of type color.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ColorPaths}`
 */
export const colorPaths = /** @type {const} */ ([
  'alias.colors.primary.50',
  'primitive.colors.blue.50',
  'alias.colors.primary.100',
  'primitive.colors.blue.100',
  'alias.colors.primary.200',
  'primitive.colors.blue.200',
  'alias.colors.primary.300',
  'primitive.colors.blue.300',
  'alias.colors.primary.400',
  'primitive.colors.blue.400',
  'alias.colors.primary.600',
  'primitive.colors.blue.600',
  'alias.colors.primary.700',
  'primitive.colors.blue.700',
  'alias.colors.primary.800',
  'primitive.colors.blue.800',
  'alias.colors.primary.900',
  'primitive.colors.blue.900',
  'alias.colors.primary.1000',
  'primitive.colors.blue.1000',
  'alias.colors.primary.default',
  'primitive.colors.blue.500',
  'alias.colors.secondary.50',
  'primitive.colors.bluelight.50',
  'alias.colors.secondary.100',
  'primitive.colors.bluelight.100',
  'alias.colors.secondary.200',
  'primitive.colors.bluelight.200',
  'alias.colors.secondary.300',
  'primitive.colors.bluelight.300',
  'alias.colors.secondary.400',
  'primitive.colors.bluelight.400',
  'alias.colors.secondary.600',
  'primitive.colors.bluelight.600',
  'alias.colors.secondary.700',
  'primitive.colors.bluelight.700',
  'alias.colors.secondary.800',
  'primitive.colors.bluelight.800',
  'alias.colors.secondary.900',
  'primitive.colors.bluelight.900',
  'alias.colors.secondary.1000',
  'primitive.colors.bluelight.1000',
  'alias.colors.secondary.default',
  'primitive.colors.bluelight.500',
  'alias.colors.error.50',
  'primitive.colors.red.50',
  'alias.colors.error.100',
  'primitive.colors.red.100',
  'alias.colors.error.200',
  'primitive.colors.red.200',
  'alias.colors.error.300',
  'primitive.colors.red.300',
  'alias.colors.error.400',
  'primitive.colors.red.400',
  'alias.colors.error.600',
  'primitive.colors.red.600',
  'alias.colors.error.700',
  'primitive.colors.red.700',
  'alias.colors.error.800',
  'primitive.colors.red.800',
  'alias.colors.error.900',
  'primitive.colors.red.900',
  'alias.colors.error.1000',
  'primitive.colors.red.1000',
  'alias.colors.error.default',
  'primitive.colors.red.500',
  'alias.colors.information.50',
  'primitive.colors.teal.50',
  'alias.colors.information.100',
  'primitive.colors.teal.100',
  'alias.colors.information.200',
  'primitive.colors.teal.200',
  'alias.colors.information.300',
  'primitive.colors.teal.300',
  'alias.colors.information.400',
  'primitive.colors.teal.400',
  'alias.colors.information.600',
  'primitive.colors.teal.600',
  'alias.colors.information.700',
  'primitive.colors.teal.700',
  'alias.colors.information.800',
  'primitive.colors.teal.800',
  'alias.colors.information.900',
  'primitive.colors.teal.900',
  'alias.colors.information.1000',
  'primitive.colors.teal.1000',
  'alias.colors.information.default',
  'primitive.colors.teal.500',
  'alias.colors.neutral.50',
  'primitive.colors.grey.50',
  'alias.colors.neutral.100',
  'primitive.colors.grey.100',
  'alias.colors.neutral.200',
  'primitive.colors.grey.200',
  'alias.colors.neutral.300',
  'primitive.colors.grey.300',
  'alias.colors.neutral.400',
  'primitive.colors.grey.400',
  'alias.colors.neutral.600',
  'primitive.colors.grey.600',
  'alias.colors.neutral.700',
  'primitive.colors.grey.700',
  'alias.colors.neutral.800',
  'primitive.colors.grey.800',
  'alias.colors.neutral.900',
  'primitive.colors.grey.900',
  'alias.colors.neutral.1000',
  'primitive.colors.grey.1000',
  'alias.colors.neutral.black',
  'alias.colors.neutral.default',
  'primitive.colors.grey.500',
  'alias.colors.neutral.white',
  'alias.colors.success.50',
  'primitive.colors.green.50',
  'alias.colors.success.100',
  'primitive.colors.green.100',
  'alias.colors.success.200',
  'primitive.colors.green.200',
  'alias.colors.success.300',
  'primitive.colors.green.300',
  'alias.colors.success.400',
  'primitive.colors.green.400',
  'alias.colors.success.600',
  'primitive.colors.green.600',
  'alias.colors.success.700',
  'primitive.colors.green.700',
  'alias.colors.success.800',
  'primitive.colors.green.800',
  'alias.colors.success.900',
  'primitive.colors.green.900',
  'alias.colors.success.1000',
  'primitive.colors.green.1000',
  'alias.colors.success.default',
  'primitive.colors.green.500',
  'alias.colors.warning.50',
  'primitive.colors.yellow.50',
  'alias.colors.warning.100',
  'primitive.colors.yellow.100',
  'alias.colors.warning.200',
  'primitive.colors.yellow.200',
  'alias.colors.warning.300',
  'primitive.colors.yellow.300',
  'alias.colors.warning.400',
  'primitive.colors.yellow.400',
  'alias.colors.warning.600',
  'primitive.colors.yellow.600',
  'alias.colors.warning.700',
  'primitive.colors.yellow.700',
  'alias.colors.warning.800',
  'primitive.colors.yellow.800',
  'alias.colors.warning.900',
  'primitive.colors.yellow.900',
  'alias.colors.warning.1000',
  'primitive.colors.yellow.1000',
  'alias.colors.warning.default',
  'primitive.colors.yellow.500',
  'component.border.action',
  'component.border.action-hover',
  'component.border.disabled',
  'component.border.error',
  'component.border.focus',
  'component.border.information',
  'component.border.primary',
  'component.border.secondary',
  'component.border.success',
  'component.border.warning',
  'component.icon.error',
  'component.icon.information',
  'component.icon.primary',
  'component.icon.success',
  'component.icon.warning',
  'component.surface.action',
  'component.surface.action-hover',
  'component.surface.disabled',
  'component.surface.error',
  'component.surface.information',
  'component.surface.page',
  'component.surface.primary',
  'component.surface.success',
  'component.surface.warning',
  'component.text.action',
  'component.text.action-hover',
  'component.text.body',
  'component.text.disabled',
  'component.text.error',
  'component.text.heading',
  'component.text.information',
  'component.text.on-action',
  'component.text.on-disabled',
  'component.text.success',
  'component.text.warning',
  'primitive.colors.black.100',
  'primitive.colors.black.200',
  'primitive.colors.black.300',
  'primitive.colors.black.400',
  'primitive.colors.black.500',
  'primitive.colors.black.600',
  'primitive.colors.black.700',
  'primitive.colors.black.800',
  'primitive.colors.black.900',
  'primitive.colors.black.1000',
  'primitive.colors.purple.50',
  'primitive.colors.purple.100',
  'primitive.colors.purple.200',
  'primitive.colors.purple.300',
  'primitive.colors.purple.400',
  'primitive.colors.purple.500',
  'primitive.colors.purple.600',
  'primitive.colors.purple.700',
  'primitive.colors.purple.800',
  'primitive.colors.purple.900',
  'primitive.colors.purple.1000',
  'primitive.colors.rose.50',
  'primitive.colors.rose.100',
  'primitive.colors.rose.200',
  'primitive.colors.rose.300',
  'primitive.colors.rose.400',
  'primitive.colors.rose.500',
  'primitive.colors.rose.600',
  'primitive.colors.rose.700',
  'primitive.colors.rose.800',
  'primitive.colors.rose.900',
  'primitive.colors.rose.1000',
  'primitive.colors.white.100',
  'primitive.colors.white.200',
  'primitive.colors.white.300',
  'primitive.colors.white.400',
  'primitive.colors.white.500',
  'primitive.colors.white.600',
  'primitive.colors.white.700',
  'primitive.colors.white.800',
  'primitive.colors.white.900',
  'primitive.colors.white.1000',
  'Color styles.colors.black.100',
  'Color styles.colors.black.200',
  'Color styles.colors.black.300',
  'Color styles.colors.black.400',
  'Color styles.colors.black.500',
  'Color styles.colors.black.600',
  'Color styles.colors.black.700',
  'Color styles.colors.black.800',
  'Color styles.colors.black.900',
  'Color styles.colors.black.1000',
  'Color styles.colors.blue.50',
  'Color styles.colors.blue.100',
  'Color styles.colors.blue.200',
  'Color styles.colors.blue.300',
  'Color styles.colors.blue.400',
  'Color styles.colors.blue.500',
  'Color styles.colors.blue.600',
  'Color styles.colors.blue.700',
  'Color styles.colors.blue.800',
  'Color styles.colors.blue.900',
  'Color styles.colors.blue.1000',
  'Color styles.colors.bluelight.50',
  'Color styles.colors.bluelight.100',
  'Color styles.colors.bluelight.200',
  'Color styles.colors.bluelight.300',
  'Color styles.colors.bluelight.400',
  'Color styles.colors.bluelight.500',
  'Color styles.colors.bluelight.600',
  'Color styles.colors.bluelight.700',
  'Color styles.colors.bluelight.800',
  'Color styles.colors.bluelight.900',
  'Color styles.colors.bluelight.1000',
  'Color styles.colors.green.50',
  'Color styles.colors.green.100',
  'Color styles.colors.green.200',
  'Color styles.colors.green.300',
  'Color styles.colors.green.400',
  'Color styles.colors.green.500',
  'Color styles.colors.green.600',
  'Color styles.colors.green.700',
  'Color styles.colors.green.800',
  'Color styles.colors.green.900',
  'Color styles.colors.green.1000',
  'Color styles.colors.grey.50',
  'Color styles.colors.grey.100',
  'Color styles.colors.grey.200',
  'Color styles.colors.grey.300',
  'Color styles.colors.grey.400',
  'Color styles.colors.grey.500',
  'Color styles.colors.grey.600',
  'Color styles.colors.grey.700',
  'Color styles.colors.grey.800',
  'Color styles.colors.grey.900',
  'Color styles.colors.grey.1000',
  'Color styles.colors.purple.50',
  'Color styles.colors.purple.100',
  'Color styles.colors.purple.200',
  'Color styles.colors.purple.300',
  'Color styles.colors.purple.400',
  'Color styles.colors.purple.500',
  'Color styles.colors.purple.600',
  'Color styles.colors.purple.700',
  'Color styles.colors.purple.800',
  'Color styles.colors.purple.900',
  'Color styles.colors.purple.1000',
  'Color styles.colors.red.50',
  'Color styles.colors.red.100',
  'Color styles.colors.red.200',
  'Color styles.colors.red.300',
  'Color styles.colors.red.400',
  'Color styles.colors.red.500',
  'Color styles.colors.red.600',
  'Color styles.colors.red.700',
  'Color styles.colors.red.800',
  'Color styles.colors.red.900',
  'Color styles.colors.red.1000',
  'Color styles.colors.rose.50',
  'Color styles.colors.rose.100',
  'Color styles.colors.rose.200',
  'Color styles.colors.rose.300',
  'Color styles.colors.rose.400',
  'Color styles.colors.rose.500',
  'Color styles.colors.rose.600',
  'Color styles.colors.rose.700',
  'Color styles.colors.rose.800',
  'Color styles.colors.rose.900',
  'Color styles.colors.rose.1000',
  'Color styles.colors.teal.50',
  'Color styles.colors.teal.100',
  'Color styles.colors.teal.200',
  'Color styles.colors.teal.300',
  'Color styles.colors.teal.400',
  'Color styles.colors.teal.500',
  'Color styles.colors.teal.600',
  'Color styles.colors.teal.700',
  'Color styles.colors.teal.800',
  'Color styles.colors.teal.900',
  'Color styles.colors.teal.1000',
  'Color styles.colors.white.100',
  'Color styles.colors.white.200',
  'Color styles.colors.white.300',
  'Color styles.colors.white.400',
  'Color styles.colors.white.500',
  'Color styles.colors.white.600',
  'Color styles.colors.white.700',
  'Color styles.colors.white.800',
  'Color styles.colors.white.900',
  'Color styles.colors.white.1000',
  'Color styles.colors.yellow.50',
  'Color styles.colors.yellow.100',
  'Color styles.colors.yellow.200',
  'Color styles.colors.yellow.300',
  'Color styles.colors.yellow.400',
  'Color styles.colors.yellow.500',
  'Color styles.colors.yellow.600',
  'Color styles.colors.yellow.700',
  'Color styles.colors.yellow.800',
  'Color styles.colors.yellow.900',
  'Color styles.colors.yellow.1000',
]);
/**
 * @typedef {typeof shadowsPaths} ShadowsPaths - All the valid paths for the tokens of type shadows.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ShadowsPaths}`
 */
export const shadowsPaths = /** @type {const} */ ([
  'Effect styles.shadow.lg',
  'Effect styles.shadow.md',
  'Effect styles.shadow.sm',
  'Effect styles.shadow.xl',
]);
/**
 * @typedef {typeof shadowPaths} ShadowPaths - All the valid paths for the tokens of type shadow.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ShadowPaths}`
 */
export const shadowPaths = /** @type {const} */ ([
  'Effect styles.shadow.none',
  'Effect styles.shadow.xs',
]);
/**
 * @typedef {typeof textStylePaths} TextstylePaths - All the valid paths for the tokens of type textStyle.
 * To use this type you can do: `@type {import('path/to/myTokensFile').TextstylePaths}`
 */
export const textStylePaths = /** @type {const} */ ([
  'Text styles.typography.styles.body.lg',
  'Text styles.typography.styles.body.md',
  'Text styles.typography.styles.body.sm',
  'Text styles.typography.styles.body.xs',
  'Text styles.typography.styles.code.md',
  'Text styles.typography.styles.code.sm',
  'Text styles.typography.styles.display.lg',
  'Text styles.typography.styles.display.md',
  'Text styles.typography.styles.display.sm',
  'Text styles.typography.styles.display.xl',
  'Text styles.typography.styles.heading.h1',
  'Text styles.typography.styles.heading.h2',
  'Text styles.typography.styles.heading.h3',
  'Text styles.typography.styles.heading.h4',
  'Text styles.typography.styles.heading.h5',
  'Text styles.typography.styles.heading.h6',
  'Text styles.typography.styles.label.lg',
  'Text styles.typography.styles.label.md',
  'Text styles.typography.styles.label.sm',
  'Text styles.typography.styles.label.xs',
]);
/**
 * @typedef {typeof aliasPaths} AliasPaths - All the valid paths for the collection alias.
 * To use this type you can do: `@type {import('path/to/myTokensFile').AliasPaths}`
 */
export const aliasPaths = /** @type {const} */ ([
  'alias.spacing.component.3xl',
  'alias.spacing.component.4xl',
  'alias.spacing.component.lg',
  'alias.spacing.component.md',
  'alias.spacing.component.sm',
  'alias.spacing.component.xl',
  'alias.spacing.component.xs',
  'alias.spacing.component.xxs',
  'alias.spacing.component.2xl',
  'alias.spacing.section.lg',
  'alias.spacing.section.md',
  'alias.spacing.section.sm',
  'alias.spacing.section.xl',
  'alias.colors.primary.50',
  'alias.colors.primary.100',
  'alias.colors.primary.200',
  'alias.colors.primary.300',
  'alias.colors.primary.400',
  'alias.colors.primary.600',
  'alias.colors.primary.700',
  'alias.colors.primary.800',
  'alias.colors.primary.900',
  'alias.colors.primary.1000',
  'alias.colors.primary.default',
  'alias.colors.secondary.50',
  'alias.colors.secondary.100',
  'alias.colors.secondary.200',
  'alias.colors.secondary.300',
  'alias.colors.secondary.400',
  'alias.colors.secondary.600',
  'alias.colors.secondary.700',
  'alias.colors.secondary.800',
  'alias.colors.secondary.900',
  'alias.colors.secondary.1000',
  'alias.colors.secondary.default',
  'alias.colors.error.50',
  'alias.colors.error.100',
  'alias.colors.error.200',
  'alias.colors.error.300',
  'alias.colors.error.400',
  'alias.colors.error.600',
  'alias.colors.error.700',
  'alias.colors.error.800',
  'alias.colors.error.900',
  'alias.colors.error.1000',
  'alias.colors.error.default',
  'alias.colors.information.50',
  'alias.colors.information.100',
  'alias.colors.information.200',
  'alias.colors.information.300',
  'alias.colors.information.400',
  'alias.colors.information.600',
  'alias.colors.information.700',
  'alias.colors.information.800',
  'alias.colors.information.900',
  'alias.colors.information.1000',
  'alias.colors.information.default',
  'alias.colors.neutral.50',
  'alias.colors.neutral.100',
  'alias.colors.neutral.200',
  'alias.colors.neutral.300',
  'alias.colors.neutral.400',
  'alias.colors.neutral.600',
  'alias.colors.neutral.700',
  'alias.colors.neutral.800',
  'alias.colors.neutral.900',
  'alias.colors.neutral.1000',
  'alias.colors.neutral.black',
  'alias.colors.neutral.default',
  'alias.colors.neutral.white',
  'alias.colors.success.50',
  'alias.colors.success.100',
  'alias.colors.success.200',
  'alias.colors.success.300',
  'alias.colors.success.400',
  'alias.colors.success.600',
  'alias.colors.success.700',
  'alias.colors.success.800',
  'alias.colors.success.900',
  'alias.colors.success.1000',
  'alias.colors.success.default',
  'alias.colors.warning.50',
  'alias.colors.warning.100',
  'alias.colors.warning.200',
  'alias.colors.warning.300',
  'alias.colors.warning.400',
  'alias.colors.warning.600',
  'alias.colors.warning.700',
  'alias.colors.warning.800',
  'alias.colors.warning.900',
  'alias.colors.warning.1000',
  'alias.colors.warning.default',
]);
/**
 * @typedef {typeof primitivePaths} PrimitivePaths - All the valid paths for the collection primitive.
 * To use this type you can do: `@type {import('path/to/myTokensFile').PrimitivePaths}`
 */
export const primitivePaths = /** @type {const} */ ([
  'primitive.spacing.scale.12',
  'primitive.spacing.scale.16',
  'primitive.spacing.scale.6',
  'primitive.spacing.scale.4',
  'primitive.spacing.scale.3',
  'primitive.spacing.scale.8',
  'primitive.spacing.scale.2',
  'primitive.spacing.scale.1',
  'primitive.spacing.scale.10',
  'primitive.spacing.scale.32',
  'primitive.spacing.scale.24',
  'primitive.spacing.scale.48',
  'primitive.colors.blue.50',
  'primitive.colors.blue.100',
  'primitive.colors.blue.200',
  'primitive.colors.blue.300',
  'primitive.colors.blue.400',
  'primitive.colors.blue.600',
  'primitive.colors.blue.700',
  'primitive.colors.blue.800',
  'primitive.colors.blue.900',
  'primitive.colors.blue.1000',
  'primitive.colors.blue.500',
  'primitive.colors.bluelight.50',
  'primitive.colors.bluelight.100',
  'primitive.colors.bluelight.200',
  'primitive.colors.bluelight.300',
  'primitive.colors.bluelight.400',
  'primitive.colors.bluelight.600',
  'primitive.colors.bluelight.700',
  'primitive.colors.bluelight.800',
  'primitive.colors.bluelight.900',
  'primitive.colors.bluelight.1000',
  'primitive.colors.bluelight.500',
  'primitive.colors.red.50',
  'primitive.colors.red.100',
  'primitive.colors.red.200',
  'primitive.colors.red.300',
  'primitive.colors.red.400',
  'primitive.colors.red.600',
  'primitive.colors.red.700',
  'primitive.colors.red.800',
  'primitive.colors.red.900',
  'primitive.colors.red.1000',
  'primitive.colors.red.500',
  'primitive.colors.teal.50',
  'primitive.colors.teal.100',
  'primitive.colors.teal.200',
  'primitive.colors.teal.300',
  'primitive.colors.teal.400',
  'primitive.colors.teal.600',
  'primitive.colors.teal.700',
  'primitive.colors.teal.800',
  'primitive.colors.teal.900',
  'primitive.colors.teal.1000',
  'primitive.colors.teal.500',
  'primitive.colors.grey.50',
  'primitive.colors.grey.100',
  'primitive.colors.grey.200',
  'primitive.colors.grey.300',
  'primitive.colors.grey.400',
  'primitive.colors.grey.600',
  'primitive.colors.grey.700',
  'primitive.colors.grey.800',
  'primitive.colors.grey.900',
  'primitive.colors.grey.1000',
  'primitive.colors.grey.500',
  'primitive.colors.green.50',
  'primitive.colors.green.100',
  'primitive.colors.green.200',
  'primitive.colors.green.300',
  'primitive.colors.green.400',
  'primitive.colors.green.600',
  'primitive.colors.green.700',
  'primitive.colors.green.800',
  'primitive.colors.green.900',
  'primitive.colors.green.1000',
  'primitive.colors.green.500',
  'primitive.colors.yellow.50',
  'primitive.colors.yellow.100',
  'primitive.colors.yellow.200',
  'primitive.colors.yellow.300',
  'primitive.colors.yellow.400',
  'primitive.colors.yellow.600',
  'primitive.colors.yellow.700',
  'primitive.colors.yellow.800',
  'primitive.colors.yellow.900',
  'primitive.colors.yellow.1000',
  'primitive.colors.yellow.500',
  'primitive.colors.black.100',
  'primitive.colors.black.200',
  'primitive.colors.black.300',
  'primitive.colors.black.400',
  'primitive.colors.black.500',
  'primitive.colors.black.600',
  'primitive.colors.black.700',
  'primitive.colors.black.800',
  'primitive.colors.black.900',
  'primitive.colors.black.1000',
  'primitive.colors.purple.50',
  'primitive.colors.purple.100',
  'primitive.colors.purple.200',
  'primitive.colors.purple.300',
  'primitive.colors.purple.400',
  'primitive.colors.purple.500',
  'primitive.colors.purple.600',
  'primitive.colors.purple.700',
  'primitive.colors.purple.800',
  'primitive.colors.purple.900',
  'primitive.colors.purple.1000',
  'primitive.colors.rose.50',
  'primitive.colors.rose.100',
  'primitive.colors.rose.200',
  'primitive.colors.rose.300',
  'primitive.colors.rose.400',
  'primitive.colors.rose.500',
  'primitive.colors.rose.600',
  'primitive.colors.rose.700',
  'primitive.colors.rose.800',
  'primitive.colors.rose.900',
  'primitive.colors.rose.1000',
  'primitive.colors.white.100',
  'primitive.colors.white.200',
  'primitive.colors.white.300',
  'primitive.colors.white.400',
  'primitive.colors.white.500',
  'primitive.colors.white.600',
  'primitive.colors.white.700',
  'primitive.colors.white.800',
  'primitive.colors.white.900',
  'primitive.colors.white.1000',
  'primitive.size.container.max',
  'primitive.size.container.md',
  'primitive.size.container.sm',
  'primitive.size.container.xl',
  'primitive.size.container.xs',
  'primitive.size.container.2xl',
  'primitive.size.container.lg',
  'primitive.size.icon.lg',
  'primitive.size.icon.md',
  'primitive.size.icon.sm',
  'primitive.size.icon.xl',
  'primitive.size.icon.xs',
  'primitive.size.component.lg',
  'primitive.size.component.md',
  'primitive.size.component.sm',
  'primitive.size.component.xl',
  'primitive.size.component.xs',
  'primitive.spacing.scale.0',
  'primitive.spacing.scale.5',
  'primitive.spacing.scale.20',
  'primitive.spacing.scale.40',
  'primitive.spacing.scale.56',
  'primitive.spacing.scale.64',
  'primitive.spacing.layout.desktop.x',
  'primitive.spacing.layout.desktop.y',
  'primitive.spacing.layout.mobile.x',
  'primitive.spacing.layout.mobile.y',
  'primitive.spacing.layout.tablet.x',
  'primitive.spacing.layout.tablet.y',
  'primitive.typography.fontSize.2xl',
  'primitive.typography.fontSize.3xl',
  'primitive.typography.fontSize.4xl',
  'primitive.typography.fontSize.5xl',
  'primitive.typography.fontSize.6xl',
  'primitive.typography.fontSize.7xl',
  'primitive.typography.fontSize.8xl',
  'primitive.typography.fontSize.lg',
  'primitive.typography.fontSize.md',
  'primitive.typography.fontSize.sm',
  'primitive.typography.fontSize.xl',
  'primitive.typography.fontSize.xs',
  'primitive.typography.fontWeight.bold',
  'primitive.typography.fontWeight.medium',
  'primitive.typography.fontWeight.regular',
  'primitive.typography.fontWeight.semibold',
  'primitive.typography.letterSpacing.normal',
  'primitive.typography.letterSpacing.tight',
  'primitive.typography.letterSpacing.tighter',
  'primitive.typography.letterSpacing.wide',
  'primitive.typography.letterSpacing.wider',
  'primitive.borderRadius.2xl',
  'primitive.borderRadius.3xl',
  'primitive.borderRadius.full',
  'primitive.borderRadius.lg',
  'primitive.borderRadius.md',
  'primitive.borderRadius.none',
  'primitive.borderRadius.sm',
  'primitive.borderRadius.xl',
  'primitive.borderRadius.xs',
  'primitive.borderWidth.lg',
  'primitive.borderWidth.md',
  'primitive.borderWidth.none',
  'primitive.borderWidth.sm',
  'primitive.borderWidth.xs',
  'primitive.opacity.0',
  'primitive.opacity.5',
  'primitive.opacity.10',
  'primitive.opacity.20',
  'primitive.opacity.30',
  'primitive.opacity.40',
  'primitive.opacity.50',
  'primitive.opacity.60',
  'primitive.opacity.70',
  'primitive.opacity.80',
  'primitive.opacity.90',
  'primitive.opacity.95',
  'primitive.opacity.100',
]);
/**
 * @typedef {typeof componentPaths} ComponentPaths - All the valid paths for the collection component.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ComponentPaths}`
 */
export const componentPaths = /** @type {const} */ ([
  'component.border.action',
  'component.border.action-hover',
  'component.border.disabled',
  'component.border.error',
  'component.border.focus',
  'component.border.information',
  'component.border.primary',
  'component.border.secondary',
  'component.border.success',
  'component.border.warning',
  'component.icon.error',
  'component.icon.information',
  'component.icon.primary',
  'component.icon.success',
  'component.icon.warning',
  'component.surface.action',
  'component.surface.action-hover',
  'component.surface.disabled',
  'component.surface.error',
  'component.surface.information',
  'component.surface.page',
  'component.surface.primary',
  'component.surface.success',
  'component.surface.warning',
  'component.text.action',
  'component.text.action-hover',
  'component.text.body',
  'component.text.disabled',
  'component.text.error',
  'component.text.heading',
  'component.text.information',
  'component.text.on-action',
  'component.text.on-disabled',
  'component.text.success',
  'component.text.warning',
]);
/**
 * @typedef {DimensionPaths | ColorPaths | ShadowsPaths | ShadowPaths | TextstylePaths | AliasPaths | PrimitivePaths | ComponentPaths} AllPath - All possible paths
 */
/**
 * @typedef {typeof pathsByType} PathsByType - All the paths for a given token type. Needed for `getTokensByType`
 */
const pathsByType = /** @type {const} */ ({
  dimension: dimensionPaths,
  color: colorPaths,
  shadows: shadowsPaths,
  shadow: shadowPaths,
  textStyle: textStylePaths,
});

/**
 * @typedef {typeof dimensionModes[number]} DimensionModes - All the valid modes of dimension.
 * To use this type you can do: `@type {import('path/to/myTokensFile').DimensionModes}`
 */
export const dimensionModes = /** @type {const} */ ([
  'alias tokens',
  'primitive tokens',
]);

/**
 * @typedef {typeof colorModes[number]} ColorModes - All the valid modes of color.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ColorModes}`
 */
export const colorModes = /** @type {const} */ ([
  'alias tokens',
  'primitive tokens',
  'mapped (component) tokens',
  'default',
]);

/**
 * @typedef {typeof shadowsModes[number]} ShadowsModes - All the valid modes of shadows.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ShadowsModes}`
 */
export const shadowsModes = /** @type {const} */ (['default']);

/**
 * @typedef {typeof shadowModes[number]} ShadowModes - All the valid modes of shadow.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ShadowModes}`
 */
export const shadowModes = /** @type {const} */ (['default']);

/**
 * @typedef {typeof textStyleModes[number]} TextstyleModes - All the valid modes of textStyle.
 * To use this type you can do: `@type {import('path/to/myTokensFile').TextstyleModes}`
 */
export const textStyleModes = /** @type {const} */ (['default']);

/**
 * @typedef {typeof aliasModes[number]} AliasModes - All the valid modes of alias.
 * To use this type you can do: `@type {import('path/to/myTokensFile').AliasModes}`
 */
export const aliasModes = /** @type {const} */ (['alias tokens']);

/**
 * @typedef {typeof primitiveModes[number]} PrimitiveModes - All the valid modes of primitive.
 * To use this type you can do: `@type {import('path/to/myTokensFile').PrimitiveModes}`
 */
export const primitiveModes = /** @type {const} */ (['primitive tokens']);

/**
 * @typedef {typeof componentModes[number]} ComponentModes - All the valid modes of component.
 * To use this type you can do: `@type {import('path/to/myTokensFile').ComponentModes}`
 */
export const componentModes = /** @type {const} */ ([
  'mapped (component) tokens',
]);

/**
 * @typedef {DimensionModes | ColorModes | ShadowsModes | ShadowModes | TextstyleModes | AliasModes | PrimitiveModes | ComponentModes} AllMode - All the available modes
 */

/**
 * @typedef {typeof tokens} Tokens - All the tokens.
 * Use `getTokenByMode` to retrieve one.
 */
export const tokens = /** @type {const} */ ({
  'alias.spacing.component.3xl': {'alias tokens': 48},
  'primitive.spacing.scale.12': {'primitive tokens': 48},
  'alias.spacing.component.4xl': {'alias tokens': 64},
  'primitive.spacing.scale.16': {'primitive tokens': 64},
  'alias.spacing.component.lg': {'alias tokens': 24},
  'primitive.spacing.scale.6': {'primitive tokens': 24},
  'alias.spacing.component.md': {'alias tokens': 16},
  'primitive.spacing.scale.4': {'primitive tokens': 16},
  'alias.spacing.component.sm': {'alias tokens': 12},
  'primitive.spacing.scale.3': {'primitive tokens': 12},
  'alias.spacing.component.xl': {'alias tokens': 32},
  'primitive.spacing.scale.8': {'primitive tokens': 32},
  'alias.spacing.component.xs': {'alias tokens': 8},
  'primitive.spacing.scale.2': {'primitive tokens': 8},
  'alias.spacing.component.xxs': {'alias tokens': 4},
  'primitive.spacing.scale.1': {'primitive tokens': 4},
  'alias.spacing.component.2xl': {'alias tokens': 40},
  'primitive.spacing.scale.10': {'primitive tokens': 40},
  'alias.spacing.section.lg': {'alias tokens': 128},
  'primitive.spacing.scale.32': {'primitive tokens': 128},
  'alias.spacing.section.md': {'alias tokens': 96},
  'primitive.spacing.scale.24': {'primitive tokens': 96},
  'alias.spacing.section.sm': {'alias tokens': 64},
  'alias.spacing.section.xl': {'alias tokens': 192},
  'primitive.spacing.scale.48': {'primitive tokens': 192},
  'primitive.size.container.max': {'primitive tokens': 1920},
  'primitive.size.container.md': {'primitive tokens': 768},
  'primitive.size.container.sm': {'primitive tokens': 480},
  'primitive.size.container.xl': {'primitive tokens': 1280},
  'primitive.size.container.xs': {'primitive tokens': 360},
  'primitive.size.container.2xl': {'primitive tokens': 1440},
  'primitive.size.container.lg': {'primitive tokens': 1024},
  'primitive.size.icon.lg': {'primitive tokens': 24},
  'primitive.size.icon.md': {'primitive tokens': 20},
  'primitive.size.icon.sm': {'primitive tokens': 16},
  'primitive.size.icon.xl': {'primitive tokens': 32},
  'primitive.size.icon.xs': {'primitive tokens': 12},
  'primitive.size.component.lg': {'primitive tokens': 48},
  'primitive.size.component.md': {'primitive tokens': 40},
  'primitive.size.component.sm': {'primitive tokens': 32},
  'primitive.size.component.xl': {'primitive tokens': 64},
  'primitive.size.component.xs': {'primitive tokens': 24},
  'primitive.spacing.scale.0': {'primitive tokens': 0},
  'primitive.spacing.scale.5': {'primitive tokens': 20},
  'primitive.spacing.scale.20': {'primitive tokens': 80},
  'primitive.spacing.scale.40': {'primitive tokens': 160},
  'primitive.spacing.scale.56': {'primitive tokens': 224},
  'primitive.spacing.scale.64': {'primitive tokens': 256},
  'primitive.spacing.layout.desktop.x': {'primitive tokens': 32},
  'primitive.spacing.layout.desktop.y': {'primitive tokens': 40},
  'primitive.spacing.layout.mobile.x': {'primitive tokens': 16},
  'primitive.spacing.layout.mobile.y': {'primitive tokens': 24},
  'primitive.spacing.layout.tablet.x': {'primitive tokens': 24},
  'primitive.spacing.layout.tablet.y': {'primitive tokens': 32},
  'primitive.typography.fontSize.2xl': {'primitive tokens': 20},
  'primitive.typography.fontSize.3xl': {'primitive tokens': 24},
  'primitive.typography.fontSize.4xl': {'primitive tokens': 30},
  'primitive.typography.fontSize.5xl': {'primitive tokens': 36},
  'primitive.typography.fontSize.6xl': {'primitive tokens': 48},
  'primitive.typography.fontSize.7xl': {'primitive tokens': 60},
  'primitive.typography.fontSize.8xl': {'primitive tokens': 72},
  'primitive.typography.fontSize.lg': {'primitive tokens': 16},
  'primitive.typography.fontSize.md': {'primitive tokens': 14},
  'primitive.typography.fontSize.sm': {'primitive tokens': 12},
  'primitive.typography.fontSize.xl': {'primitive tokens': 18},
  'primitive.typography.fontSize.xs': {'primitive tokens': 10},
  'primitive.typography.fontWeight.bold': {'primitive tokens': 700},
  'primitive.typography.fontWeight.medium': {'primitive tokens': 500},
  'primitive.typography.fontWeight.regular': {'primitive tokens': 400},
  'primitive.typography.fontWeight.semibold': {'primitive tokens': 600},
  'primitive.typography.letterSpacing.normal': {'primitive tokens': 0},
  'primitive.typography.letterSpacing.tight': {
    'primitive tokens': -0.4000000059604645,
  },
  'primitive.typography.letterSpacing.tighter': {
    'primitive tokens': -0.800000011920929,
  },
  'primitive.typography.letterSpacing.wide': {
    'primitive tokens': 0.4000000059604645,
  },
  'primitive.typography.letterSpacing.wider': {
    'primitive tokens': 0.800000011920929,
  },
  'primitive.borderRadius.2xl': {'primitive tokens': 24},
  'primitive.borderRadius.3xl': {'primitive tokens': 32},
  'primitive.borderRadius.full': {'primitive tokens': 9999},
  'primitive.borderRadius.lg': {'primitive tokens': 12},
  'primitive.borderRadius.md': {'primitive tokens': 8},
  'primitive.borderRadius.none': {'primitive tokens': 0},
  'primitive.borderRadius.sm': {'primitive tokens': 4},
  'primitive.borderRadius.xl': {'primitive tokens': 16},
  'primitive.borderRadius.xs': {'primitive tokens': 2},
  'primitive.borderWidth.lg': {'primitive tokens': 8},
  'primitive.borderWidth.md': {'primitive tokens': 4},
  'primitive.borderWidth.none': {'primitive tokens': 0},
  'primitive.borderWidth.sm': {'primitive tokens': 2},
  'primitive.borderWidth.xs': {'primitive tokens': 1},
  'primitive.opacity.0': {'primitive tokens': 0},
  'primitive.opacity.5': {'primitive tokens': 5},
  'primitive.opacity.10': {'primitive tokens': 10},
  'primitive.opacity.20': {'primitive tokens': 20},
  'primitive.opacity.30': {'primitive tokens': 30},
  'primitive.opacity.40': {'primitive tokens': 40},
  'primitive.opacity.50': {'primitive tokens': 50},
  'primitive.opacity.60': {'primitive tokens': 60},
  'primitive.opacity.70': {'primitive tokens': 70},
  'primitive.opacity.80': {'primitive tokens': 80},
  'primitive.opacity.90': {'primitive tokens': 90},
  'primitive.opacity.95': {'primitive tokens': 95},
  'primitive.opacity.100': {'primitive tokens': 100},
  'alias.colors.primary.50': {'alias tokens': 'rgb(245, 248, 255)'},
  'primitive.colors.blue.50': {'primitive tokens': 'rgb(245, 248, 255)'},
  'alias.colors.primary.100': {'alias tokens': 'rgb(239, 244, 255)'},
  'primitive.colors.blue.100': {'primitive tokens': 'rgb(239, 244, 255)'},
  'alias.colors.primary.200': {'alias tokens': 'rgb(209, 224, 255)'},
  'primitive.colors.blue.200': {'primitive tokens': 'rgb(209, 224, 255)'},
  'alias.colors.primary.300': {'alias tokens': 'rgb(178, 204, 255)'},
  'primitive.colors.blue.300': {'primitive tokens': 'rgb(178, 204, 255)'},
  'alias.colors.primary.400': {'alias tokens': 'rgb(132, 173, 255)'},
  'primitive.colors.blue.400': {'primitive tokens': 'rgb(132, 173, 255)'},
  'alias.colors.primary.600': {'alias tokens': 'rgb(41, 112, 255)'},
  'primitive.colors.blue.600': {'primitive tokens': 'rgb(41, 112, 255)'},
  'alias.colors.primary.700': {'alias tokens': 'rgb(21, 94, 239)'},
  'primitive.colors.blue.700': {'primitive tokens': 'rgb(21, 94, 239)'},
  'alias.colors.primary.800': {'alias tokens': 'rgb(0, 78, 235)'},
  'primitive.colors.blue.800': {'primitive tokens': 'rgb(0, 78, 235)'},
  'alias.colors.primary.900': {'alias tokens': 'rgb(0, 64, 193)'},
  'primitive.colors.blue.900': {'primitive tokens': 'rgb(0, 64, 193)'},
  'alias.colors.primary.1000': {'alias tokens': 'rgb(0, 53, 158)'},
  'primitive.colors.blue.1000': {'primitive tokens': 'rgb(0, 53, 158)'},
  'alias.colors.primary.default': {'alias tokens': 'rgb(82, 139, 255)'},
  'primitive.colors.blue.500': {'primitive tokens': 'rgb(82, 139, 255)'},
  'alias.colors.secondary.50': {'alias tokens': 'rgb(244, 249, 255)'},
  'primitive.colors.bluelight.50': {'primitive tokens': 'rgb(244, 249, 255)'},
  'alias.colors.secondary.100': {'alias tokens': 'rgb(239, 248, 255)'},
  'primitive.colors.bluelight.100': {'primitive tokens': 'rgb(239, 248, 255)'},
  'alias.colors.secondary.200': {'alias tokens': 'rgb(209, 233, 255)'},
  'primitive.colors.bluelight.200': {'primitive tokens': 'rgb(209, 233, 255)'},
  'alias.colors.secondary.300': {'alias tokens': 'rgb(178, 221, 255)'},
  'primitive.colors.bluelight.300': {'primitive tokens': 'rgb(178, 221, 255)'},
  'alias.colors.secondary.400': {'alias tokens': 'rgb(132, 202, 255)'},
  'primitive.colors.bluelight.400': {'primitive tokens': 'rgb(132, 202, 255)'},
  'alias.colors.secondary.600': {'alias tokens': 'rgb(46, 144, 250)'},
  'primitive.colors.bluelight.600': {'primitive tokens': 'rgb(46, 144, 250)'},
  'alias.colors.secondary.700': {'alias tokens': 'rgb(21, 111, 238)'},
  'primitive.colors.bluelight.700': {'primitive tokens': 'rgb(21, 111, 238)'},
  'alias.colors.secondary.800': {'alias tokens': 'rgb(23, 92, 211)'},
  'primitive.colors.bluelight.800': {'primitive tokens': 'rgb(23, 92, 211)'},
  'alias.colors.secondary.900': {'alias tokens': 'rgb(24, 73, 169)'},
  'primitive.colors.bluelight.900': {'primitive tokens': 'rgb(24, 73, 169)'},
  'alias.colors.secondary.1000': {'alias tokens': 'rgb(25, 64, 132)'},
  'primitive.colors.bluelight.1000': {'primitive tokens': 'rgb(25, 64, 132)'},
  'alias.colors.secondary.default': {'alias tokens': 'rgb(83, 176, 253)'},
  'primitive.colors.bluelight.500': {'primitive tokens': 'rgb(83, 176, 253)'},
  'alias.colors.error.50': {'alias tokens': 'rgb(255, 251, 250)'},
  'primitive.colors.red.50': {'primitive tokens': 'rgb(255, 251, 250)'},
  'alias.colors.error.100': {'alias tokens': 'rgb(254, 243, 242)'},
  'primitive.colors.red.100': {'primitive tokens': 'rgb(254, 243, 242)'},
  'alias.colors.error.200': {'alias tokens': 'rgb(254, 228, 226)'},
  'primitive.colors.red.200': {'primitive tokens': 'rgb(254, 228, 226)'},
  'alias.colors.error.300': {'alias tokens': 'rgb(254, 205, 202)'},
  'primitive.colors.red.300': {'primitive tokens': 'rgb(254, 205, 202)'},
  'alias.colors.error.400': {'alias tokens': 'rgb(252, 161, 155)'},
  'primitive.colors.red.400': {'primitive tokens': 'rgb(252, 161, 155)'},
  'alias.colors.error.600': {'alias tokens': 'rgb(240, 68, 55)'},
  'primitive.colors.red.600': {'primitive tokens': 'rgb(240, 68, 55)'},
  'alias.colors.error.700': {'alias tokens': 'rgb(217, 44, 32)'},
  'primitive.colors.red.700': {'primitive tokens': 'rgb(217, 44, 32)'},
  'alias.colors.error.800': {'alias tokens': 'rgb(180, 35, 24)'},
  'primitive.colors.red.800': {'primitive tokens': 'rgb(180, 35, 24)'},
  'alias.colors.error.900': {'alias tokens': 'rgb(145, 32, 24)'},
  'primitive.colors.red.900': {'primitive tokens': 'rgb(145, 32, 24)'},
  'alias.colors.error.1000': {'alias tokens': 'rgb(122, 38, 25)'},
  'primitive.colors.red.1000': {'primitive tokens': 'rgb(122, 38, 25)'},
  'alias.colors.error.default': {'alias tokens': 'rgb(249, 112, 102)'},
  'primitive.colors.red.500': {'primitive tokens': 'rgb(249, 112, 102)'},
  'alias.colors.information.50': {'alias tokens': 'rgb(246, 254, 252)'},
  'primitive.colors.teal.50': {'primitive tokens': 'rgb(246, 254, 252)'},
  'alias.colors.information.100': {'alias tokens': 'rgb(240, 253, 249)'},
  'primitive.colors.teal.100': {'primitive tokens': 'rgb(240, 253, 249)'},
  'alias.colors.information.200': {'alias tokens': 'rgb(204, 251, 239)'},
  'primitive.colors.teal.200': {'primitive tokens': 'rgb(204, 251, 239)'},
  'alias.colors.information.300': {'alias tokens': 'rgb(153, 246, 224)'},
  'primitive.colors.teal.300': {'primitive tokens': 'rgb(153, 246, 224)'},
  'alias.colors.information.400': {'alias tokens': 'rgb(94, 233, 207)'},
  'primitive.colors.teal.400': {'primitive tokens': 'rgb(94, 233, 207)'},
  'alias.colors.information.600': {'alias tokens': 'rgb(21, 183, 158)'},
  'primitive.colors.teal.600': {'primitive tokens': 'rgb(21, 183, 158)'},
  'alias.colors.information.700': {'alias tokens': 'rgb(14, 147, 132)'},
  'primitive.colors.teal.700': {'primitive tokens': 'rgb(14, 147, 132)'},
  'alias.colors.information.800': {'alias tokens': 'rgb(15, 117, 105)'},
  'primitive.colors.teal.800': {'primitive tokens': 'rgb(15, 117, 105)'},
  'alias.colors.information.900': {'alias tokens': 'rgb(18, 93, 86)'},
  'primitive.colors.teal.900': {'primitive tokens': 'rgb(18, 93, 86)'},
  'alias.colors.information.1000': {'alias tokens': 'rgb(19, 78, 72)'},
  'primitive.colors.teal.1000': {'primitive tokens': 'rgb(19, 78, 72)'},
  'alias.colors.information.default': {'alias tokens': 'rgb(46, 210, 183)'},
  'primitive.colors.teal.500': {'primitive tokens': 'rgb(46, 210, 183)'},
  'alias.colors.neutral.50': {'alias tokens': 'rgb(252, 252, 253)'},
  'primitive.colors.grey.50': {'primitive tokens': 'rgb(252, 252, 253)'},
  'alias.colors.neutral.100': {'alias tokens': 'rgb(248, 250, 252)'},
  'primitive.colors.grey.100': {'primitive tokens': 'rgb(248, 250, 252)'},
  'alias.colors.neutral.200': {'alias tokens': 'rgb(238, 242, 246)'},
  'primitive.colors.grey.200': {'primitive tokens': 'rgb(238, 242, 246)'},
  'alias.colors.neutral.300': {'alias tokens': 'rgb(227, 232, 239)'},
  'primitive.colors.grey.300': {'primitive tokens': 'rgb(227, 232, 239)'},
  'alias.colors.neutral.400': {'alias tokens': 'rgb(205, 213, 223)'},
  'primitive.colors.grey.400': {'primitive tokens': 'rgb(205, 213, 223)'},
  'alias.colors.neutral.600': {'alias tokens': 'rgb(105, 117, 134)'},
  'primitive.colors.grey.600': {'primitive tokens': 'rgb(105, 117, 134)'},
  'alias.colors.neutral.700': {'alias tokens': 'rgb(75, 85, 101)'},
  'primitive.colors.grey.700': {'primitive tokens': 'rgb(75, 85, 101)'},
  'alias.colors.neutral.800': {'alias tokens': 'rgb(54, 65, 82)'},
  'primitive.colors.grey.800': {'primitive tokens': 'rgb(54, 65, 82)'},
  'alias.colors.neutral.900': {'alias tokens': 'rgb(32, 41, 57)'},
  'primitive.colors.grey.900': {'primitive tokens': 'rgb(32, 41, 57)'},
  'alias.colors.neutral.1000': {'alias tokens': 'rgb(18, 25, 38)'},
  'primitive.colors.grey.1000': {'primitive tokens': 'rgb(18, 25, 38)'},
  'alias.colors.neutral.black': {'alias tokens': 'rgb(0, 0, 0)'},
  'alias.colors.neutral.default': {'alias tokens': 'rgb(154, 164, 178)'},
  'primitive.colors.grey.500': {'primitive tokens': 'rgb(154, 164, 178)'},
  'alias.colors.neutral.white': {'alias tokens': 'rgb(255, 255, 255)'},
  'alias.colors.success.50': {'alias tokens': 'rgb(246, 254, 249)'},
  'primitive.colors.green.50': {'primitive tokens': 'rgb(246, 254, 249)'},
  'alias.colors.success.100': {'alias tokens': 'rgb(236, 253, 243)'},
  'primitive.colors.green.100': {'primitive tokens': 'rgb(236, 253, 243)'},
  'alias.colors.success.200': {'alias tokens': 'rgb(209, 250, 223)'},
  'primitive.colors.green.200': {'primitive tokens': 'rgb(209, 250, 223)'},
  'alias.colors.success.300': {'alias tokens': 'rgb(166, 244, 197)'},
  'primitive.colors.green.300': {'primitive tokens': 'rgb(166, 244, 197)'},
  'alias.colors.success.400': {'alias tokens': 'rgb(107, 233, 166)'},
  'primitive.colors.green.400': {'primitive tokens': 'rgb(107, 233, 166)'},
  'alias.colors.success.600': {'alias tokens': 'rgb(18, 182, 105)'},
  'primitive.colors.green.600': {'primitive tokens': 'rgb(18, 182, 105)'},
  'alias.colors.success.700': {'alias tokens': 'rgb(3, 151, 84)'},
  'primitive.colors.green.700': {'primitive tokens': 'rgb(3, 151, 84)'},
  'alias.colors.success.800': {'alias tokens': 'rgb(2, 122, 72)'},
  'primitive.colors.green.800': {'primitive tokens': 'rgb(2, 122, 72)'},
  'alias.colors.success.900': {'alias tokens': 'rgb(5, 95, 58)'},
  'primitive.colors.green.900': {'primitive tokens': 'rgb(5, 95, 58)'},
  'alias.colors.success.1000': {'alias tokens': 'rgb(5, 78, 49)'},
  'primitive.colors.green.1000': {'primitive tokens': 'rgb(5, 78, 49)'},
  'alias.colors.success.default': {'alias tokens': 'rgb(49, 213, 131)'},
  'primitive.colors.green.500': {'primitive tokens': 'rgb(49, 213, 131)'},
  'alias.colors.warning.50': {'alias tokens': 'rgb(255, 247, 233)'},
  'primitive.colors.yellow.50': {'primitive tokens': 'rgb(255, 247, 233)'},
  'alias.colors.warning.100': {'alias tokens': 'rgb(254, 232, 189)'},
  'primitive.colors.yellow.100': {'primitive tokens': 'rgb(254, 232, 189)'},
  'alias.colors.warning.200': {'alias tokens': 'rgb(253, 216, 144)'},
  'primitive.colors.yellow.200': {'primitive tokens': 'rgb(253, 216, 144)'},
  'alias.colors.warning.300': {'alias tokens': 'rgb(253, 201, 100)'},
  'primitive.colors.yellow.300': {'primitive tokens': 'rgb(253, 201, 100)'},
  'alias.colors.warning.400': {'alias tokens': 'rgb(252, 193, 78)'},
  'primitive.colors.yellow.400': {'primitive tokens': 'rgb(252, 193, 78)'},
  'alias.colors.warning.600': {'alias tokens': 'rgb(252, 178, 34)'},
  'primitive.colors.yellow.600': {'primitive tokens': 'rgb(252, 178, 34)'},
  'alias.colors.warning.700': {'alias tokens': 'rgb(215, 153, 31)'},
  'primitive.colors.yellow.700': {'primitive tokens': 'rgb(215, 153, 31)'},
  'alias.colors.warning.800': {'alias tokens': 'rgb(161, 116, 25)'},
  'primitive.colors.yellow.800': {'primitive tokens': 'rgb(161, 116, 25)'},
  'alias.colors.warning.900': {'alias tokens': 'rgb(101, 71, 13)'},
  'primitive.colors.yellow.900': {'primitive tokens': 'rgb(101, 71, 13)'},
  'alias.colors.warning.1000': {'alias tokens': 'rgb(76, 53, 10)'},
  'primitive.colors.yellow.1000': {'primitive tokens': 'rgb(76, 53, 10)'},
  'alias.colors.warning.default': {'alias tokens': 'rgb(252, 192, 76)'},
  'primitive.colors.yellow.500': {'primitive tokens': 'rgb(252, 192, 76)'},
  'component.border.action': {'mapped (component) tokens': 'rgb(82, 139, 255)'},
  'component.border.action-hover': {
    'mapped (component) tokens': 'rgb(41, 112, 255)',
  },
  'component.border.disabled': {
    'mapped (component) tokens': 'rgb(227, 232, 239)',
  },
  'component.border.error': {'mapped (component) tokens': 'rgb(249, 112, 102)'},
  'component.border.focus': {'mapped (component) tokens': 'rgb(82, 139, 255)'},
  'component.border.information': {
    'mapped (component) tokens': 'rgb(46, 210, 183)',
  },
  'component.border.primary': {
    'mapped (component) tokens': 'rgb(238, 242, 246)',
  },
  'component.border.secondary': {
    'mapped (component) tokens': 'rgb(82, 139, 255)',
  },
  'component.border.success': {
    'mapped (component) tokens': 'rgb(49, 213, 131)',
  },
  'component.border.warning': {
    'mapped (component) tokens': 'rgb(252, 192, 76)',
  },
  'component.icon.error': {'mapped (component) tokens': 'rgb(249, 112, 102)'},
  'component.icon.information': {
    'mapped (component) tokens': 'rgb(46, 210, 183)',
  },
  'component.icon.primary': {'mapped (component) tokens': 'rgb(154, 164, 178)'},
  'component.icon.success': {'mapped (component) tokens': 'rgb(49, 213, 131)'},
  'component.icon.warning': {'mapped (component) tokens': 'rgb(252, 192, 76)'},
  'component.surface.action': {
    'mapped (component) tokens': 'rgb(82, 139, 255)',
  },
  'component.surface.action-hover': {
    'mapped (component) tokens': 'rgb(41, 112, 255)',
  },
  'component.surface.disabled': {
    'mapped (component) tokens': 'rgb(248, 250, 252)',
  },
  'component.surface.error': {
    'mapped (component) tokens': 'rgb(254, 243, 242)',
  },
  'component.surface.information': {
    'mapped (component) tokens': 'rgb(240, 253, 249)',
  },
  'component.surface.page': {'mapped (component) tokens': 'rgb(255, 255, 255)'},
  'component.surface.primary': {
    'mapped (component) tokens': 'rgb(255, 255, 255)',
  },
  'component.surface.success': {
    'mapped (component) tokens': 'rgb(32, 139, 76)',
  },
  'component.surface.warning': {
    'mapped (component) tokens': 'rgb(254, 232, 189)',
  },
  'component.text.action': {'mapped (component) tokens': 'rgb(82, 139, 255)'},
  'component.text.action-hover': {
    'mapped (component) tokens': 'rgb(41, 112, 255)',
  },
  'component.text.body': {'mapped (component) tokens': 'rgb(105, 117, 134)'},
  'component.text.disabled': {
    'mapped (component) tokens': 'rgb(205, 213, 223)',
  },
  'component.text.error': {'mapped (component) tokens': 'rgb(249, 112, 102)'},
  'component.text.heading': {'mapped (component) tokens': 'rgb(75, 85, 101)'},
  'component.text.information': {
    'mapped (component) tokens': 'rgb(46, 210, 183)',
  },
  'component.text.on-action': {
    'mapped (component) tokens': 'rgb(255, 255, 255)',
  },
  'component.text.on-disabled': {
    'mapped (component) tokens': 'rgb(75, 85, 101)',
  },
  'component.text.success': {'mapped (component) tokens': 'rgb(49, 213, 131)'},
  'component.text.warning': {'mapped (component) tokens': 'rgb(252, 192, 76)'},
  'primitive.colors.black.100': {'primitive tokens': 'rgba(0, 0, 0, 0.05)'},
  'primitive.colors.black.200': {'primitive tokens': 'rgba(0, 0, 0, 0.1)'},
  'primitive.colors.black.300': {'primitive tokens': 'rgba(0, 0, 0, 0.2)'},
  'primitive.colors.black.400': {'primitive tokens': 'rgba(0, 0, 0, 0.3)'},
  'primitive.colors.black.500': {'primitive tokens': 'rgba(0, 0, 0, 0.5)'},
  'primitive.colors.black.600': {'primitive tokens': 'rgba(0, 0, 0, 0.8)'},
  'primitive.colors.black.700': {'primitive tokens': 'rgba(0, 0, 0, 0.85)'},
  'primitive.colors.black.800': {'primitive tokens': 'rgba(0, 0, 0, 0.9)'},
  'primitive.colors.black.900': {'primitive tokens': 'rgba(0, 0, 0, 0.95)'},
  'primitive.colors.black.1000': {'primitive tokens': 'rgb(0, 0, 0)'},
  'primitive.colors.purple.50': {'primitive tokens': 'rgb(250, 248, 252)'},
  'primitive.colors.purple.100': {'primitive tokens': 'rgb(234, 224, 241)'},
  'primitive.colors.purple.200': {'primitive tokens': 'rgb(202, 179, 221)'},
  'primitive.colors.purple.300': {'primitive tokens': 'rgb(167, 128, 198)'},
  'primitive.colors.purple.400': {'primitive tokens': 'rgb(132, 77, 175)'},
  'primitive.colors.purple.500': {'primitive tokens': 'rgb(105, 38, 157)'},
  'primitive.colors.purple.600': {'primitive tokens': 'rgb(79, 3, 140)'},
  'primitive.colors.purple.700': {'primitive tokens': 'rgb(72, 3, 132)'},
  'primitive.colors.purple.800': {'primitive tokens': 'rgb(63, 2, 121)'},
  'primitive.colors.purple.900': {'primitive tokens': 'rgb(54, 2, 111)'},
  'primitive.colors.purple.1000': {'primitive tokens': 'rgb(38, 1, 92)'},
  'primitive.colors.rose.50': {'primitive tokens': 'rgb(255, 245, 246)'},
  'primitive.colors.rose.100': {'primitive tokens': 'rgb(255, 241, 243)'},
  'primitive.colors.rose.200': {'primitive tokens': 'rgb(255, 228, 232)'},
  'primitive.colors.rose.300': {'primitive tokens': 'rgb(254, 205, 214)'},
  'primitive.colors.rose.400': {'primitive tokens': 'rgb(254, 162, 179)'},
  'primitive.colors.rose.500': {'primitive tokens': 'rgb(252, 111, 141)'},
  'primitive.colors.rose.600': {'primitive tokens': 'rgb(245, 61, 104)'},
  'primitive.colors.rose.700': {'primitive tokens': 'rgb(227, 26, 83)'},
  'primitive.colors.rose.800': {'primitive tokens': 'rgb(192, 15, 71)'},
  'primitive.colors.rose.900': {'primitive tokens': 'rgb(161, 15, 66)'},
  'primitive.colors.rose.1000': {'primitive tokens': 'rgb(137, 17, 61)'},
  'primitive.colors.white.100': {
    'primitive tokens': 'rgba(255, 255, 255, 0.05)',
  },
  'primitive.colors.white.200': {
    'primitive tokens': 'rgba(255, 255, 255, 0.1)',
  },
  'primitive.colors.white.300': {
    'primitive tokens': 'rgba(255, 255, 255, 0.2)',
  },
  'primitive.colors.white.400': {
    'primitive tokens': 'rgba(255, 255, 255, 0.3)',
  },
  'primitive.colors.white.500': {
    'primitive tokens': 'rgba(255, 255, 255, 0.5)',
  },
  'primitive.colors.white.600': {
    'primitive tokens': 'rgba(255, 255, 255, 0.8)',
  },
  'primitive.colors.white.700': {
    'primitive tokens': 'rgba(255, 255, 255, 0.85)',
  },
  'primitive.colors.white.800': {
    'primitive tokens': 'rgba(255, 255, 255, 0.9)',
  },
  'primitive.colors.white.900': {
    'primitive tokens': 'rgba(255, 255, 255, 0.95)',
  },
  'primitive.colors.white.1000': {'primitive tokens': 'rgb(255, 255, 255)'},
  'Color styles.colors.black.100': {default: 'rgba(0, 0, 0, 0.05)'},
  'Color styles.colors.black.200': {default: 'rgba(0, 0, 0, 0.1)'},
  'Color styles.colors.black.300': {default: 'rgba(0, 0, 0, 0.2)'},
  'Color styles.colors.black.400': {default: 'rgba(0, 0, 0, 0.3)'},
  'Color styles.colors.black.500': {default: 'rgba(0, 0, 0, 0.5)'},
  'Color styles.colors.black.600': {default: 'rgba(0, 0, 0, 0.8)'},
  'Color styles.colors.black.700': {default: 'rgba(0, 0, 0, 0.85)'},
  'Color styles.colors.black.800': {default: 'rgba(0, 0, 0, 0.9)'},
  'Color styles.colors.black.900': {default: 'rgba(0, 0, 0, 0.95)'},
  'Color styles.colors.black.1000': {default: 'rgb(0, 0, 0)'},
  'Color styles.colors.blue.50': {default: 'rgb(245, 248, 255)'},
  'Color styles.colors.blue.100': {default: 'rgb(239, 244, 255)'},
  'Color styles.colors.blue.200': {default: 'rgb(209, 224, 255)'},
  'Color styles.colors.blue.300': {default: 'rgb(178, 204, 255)'},
  'Color styles.colors.blue.400': {default: 'rgb(132, 173, 255)'},
  'Color styles.colors.blue.500': {default: 'rgb(82, 139, 255)'},
  'Color styles.colors.blue.600': {default: 'rgb(41, 112, 255)'},
  'Color styles.colors.blue.700': {default: 'rgb(21, 94, 239)'},
  'Color styles.colors.blue.800': {default: 'rgb(0, 78, 235)'},
  'Color styles.colors.blue.900': {default: 'rgb(0, 64, 193)'},
  'Color styles.colors.blue.1000': {default: 'rgb(0, 53, 158)'},
  'Color styles.colors.bluelight.50': {default: 'rgb(244, 249, 255)'},
  'Color styles.colors.bluelight.100': {default: 'rgb(239, 248, 255)'},
  'Color styles.colors.bluelight.200': {default: 'rgb(209, 233, 255)'},
  'Color styles.colors.bluelight.300': {default: 'rgb(178, 221, 255)'},
  'Color styles.colors.bluelight.400': {default: 'rgb(132, 202, 255)'},
  'Color styles.colors.bluelight.500': {default: 'rgb(83, 176, 253)'},
  'Color styles.colors.bluelight.600': {default: 'rgb(46, 144, 250)'},
  'Color styles.colors.bluelight.700': {default: 'rgb(21, 111, 238)'},
  'Color styles.colors.bluelight.800': {default: 'rgb(23, 92, 211)'},
  'Color styles.colors.bluelight.900': {default: 'rgb(24, 73, 169)'},
  'Color styles.colors.bluelight.1000': {default: 'rgb(25, 64, 132)'},
  'Color styles.colors.green.50': {default: 'rgb(246, 254, 249)'},
  'Color styles.colors.green.100': {default: 'rgb(236, 253, 243)'},
  'Color styles.colors.green.200': {default: 'rgb(209, 250, 223)'},
  'Color styles.colors.green.300': {default: 'rgb(166, 244, 197)'},
  'Color styles.colors.green.400': {default: 'rgb(107, 233, 166)'},
  'Color styles.colors.green.500': {default: 'rgb(49, 213, 131)'},
  'Color styles.colors.green.600': {default: 'rgb(18, 182, 105)'},
  'Color styles.colors.green.700': {default: 'rgb(3, 151, 84)'},
  'Color styles.colors.green.800': {default: 'rgb(2, 122, 72)'},
  'Color styles.colors.green.900': {default: 'rgb(5, 95, 58)'},
  'Color styles.colors.green.1000': {default: 'rgb(5, 78, 49)'},
  'Color styles.colors.grey.50': {default: 'rgb(252, 252, 253)'},
  'Color styles.colors.grey.100': {default: 'rgb(248, 250, 252)'},
  'Color styles.colors.grey.200': {default: 'rgb(238, 242, 246)'},
  'Color styles.colors.grey.300': {default: 'rgb(227, 232, 239)'},
  'Color styles.colors.grey.400': {default: 'rgb(205, 213, 223)'},
  'Color styles.colors.grey.500': {default: 'rgb(154, 164, 178)'},
  'Color styles.colors.grey.600': {default: 'rgb(105, 117, 134)'},
  'Color styles.colors.grey.700': {default: 'rgb(75, 85, 101)'},
  'Color styles.colors.grey.800': {default: 'rgb(54, 65, 82)'},
  'Color styles.colors.grey.900': {default: 'rgb(32, 41, 57)'},
  'Color styles.colors.grey.1000': {default: 'rgb(18, 25, 38)'},
  'Color styles.colors.purple.50': {default: 'rgb(250, 248, 252)'},
  'Color styles.colors.purple.100': {default: 'rgb(234, 224, 241)'},
  'Color styles.colors.purple.200': {default: 'rgb(202, 179, 221)'},
  'Color styles.colors.purple.300': {default: 'rgb(167, 128, 198)'},
  'Color styles.colors.purple.400': {default: 'rgb(132, 77, 175)'},
  'Color styles.colors.purple.500': {default: 'rgb(105, 38, 157)'},
  'Color styles.colors.purple.600': {default: 'rgb(79, 3, 140)'},
  'Color styles.colors.purple.700': {default: 'rgb(72, 3, 132)'},
  'Color styles.colors.purple.800': {default: 'rgb(63, 2, 121)'},
  'Color styles.colors.purple.900': {default: 'rgb(54, 2, 111)'},
  'Color styles.colors.purple.1000': {default: 'rgb(38, 1, 92)'},
  'Color styles.colors.red.50': {default: 'rgb(255, 251, 250)'},
  'Color styles.colors.red.100': {default: 'rgb(254, 243, 242)'},
  'Color styles.colors.red.200': {default: 'rgb(254, 228, 226)'},
  'Color styles.colors.red.300': {default: 'rgb(254, 205, 202)'},
  'Color styles.colors.red.400': {default: 'rgb(252, 161, 155)'},
  'Color styles.colors.red.500': {default: 'rgb(249, 112, 102)'},
  'Color styles.colors.red.600': {default: 'rgb(240, 68, 55)'},
  'Color styles.colors.red.700': {default: 'rgb(217, 44, 32)'},
  'Color styles.colors.red.800': {default: 'rgb(180, 35, 24)'},
  'Color styles.colors.red.900': {default: 'rgb(145, 32, 24)'},
  'Color styles.colors.red.1000': {default: 'rgb(122, 38, 25)'},
  'Color styles.colors.rose.50': {default: 'rgb(255, 245, 246)'},
  'Color styles.colors.rose.100': {default: 'rgb(255, 241, 243)'},
  'Color styles.colors.rose.200': {default: 'rgb(255, 228, 232)'},
  'Color styles.colors.rose.300': {default: 'rgb(254, 205, 214)'},
  'Color styles.colors.rose.400': {default: 'rgb(254, 162, 179)'},
  'Color styles.colors.rose.500': {default: 'rgb(252, 111, 141)'},
  'Color styles.colors.rose.600': {default: 'rgb(245, 61, 104)'},
  'Color styles.colors.rose.700': {default: 'rgb(227, 26, 83)'},
  'Color styles.colors.rose.800': {default: 'rgb(192, 15, 71)'},
  'Color styles.colors.rose.900': {default: 'rgb(161, 15, 66)'},
  'Color styles.colors.rose.1000': {default: 'rgb(137, 17, 61)'},
  'Color styles.colors.teal.50': {default: 'rgb(246, 254, 252)'},
  'Color styles.colors.teal.100': {default: 'rgb(240, 253, 249)'},
  'Color styles.colors.teal.200': {default: 'rgb(204, 251, 239)'},
  'Color styles.colors.teal.300': {default: 'rgb(153, 246, 224)'},
  'Color styles.colors.teal.400': {default: 'rgb(94, 233, 207)'},
  'Color styles.colors.teal.500': {default: 'rgb(46, 210, 183)'},
  'Color styles.colors.teal.600': {default: 'rgb(21, 183, 158)'},
  'Color styles.colors.teal.700': {default: 'rgb(14, 147, 132)'},
  'Color styles.colors.teal.800': {default: 'rgb(15, 117, 105)'},
  'Color styles.colors.teal.900': {default: 'rgb(18, 93, 86)'},
  'Color styles.colors.teal.1000': {default: 'rgb(19, 78, 72)'},
  'Color styles.colors.white.100': {default: 'rgba(255, 255, 255, 0.05)'},
  'Color styles.colors.white.200': {default: 'rgba(255, 255, 255, 0.1)'},
  'Color styles.colors.white.300': {default: 'rgba(255, 255, 255, 0.2)'},
  'Color styles.colors.white.400': {default: 'rgba(255, 255, 255, 0.3)'},
  'Color styles.colors.white.500': {default: 'rgba(255, 255, 255, 0.5)'},
  'Color styles.colors.white.600': {default: 'rgba(255, 255, 255, 0.8)'},
  'Color styles.colors.white.700': {default: 'rgba(255, 255, 255, 0.85)'},
  'Color styles.colors.white.800': {default: 'rgba(255, 255, 255, 0.9)'},
  'Color styles.colors.white.900': {default: 'rgba(255, 255, 255, 0.95)'},
  'Color styles.colors.white.1000': {default: 'rgb(255, 255, 255)'},
  'Color styles.colors.yellow.50': {default: 'rgb(255, 247, 233)'},
  'Color styles.colors.yellow.100': {default: 'rgb(254, 232, 189)'},
  'Color styles.colors.yellow.200': {default: 'rgb(253, 216, 144)'},
  'Color styles.colors.yellow.300': {default: 'rgb(253, 201, 100)'},
  'Color styles.colors.yellow.400': {default: 'rgb(252, 193, 78)'},
  'Color styles.colors.yellow.500': {default: 'rgb(252, 192, 76)'},
  'Color styles.colors.yellow.600': {default: 'rgb(252, 178, 34)'},
  'Color styles.colors.yellow.700': {default: 'rgb(215, 153, 31)'},
  'Color styles.colors.yellow.800': {default: 'rgb(161, 116, 25)'},
  'Color styles.colors.yellow.900': {default: 'rgb(101, 71, 13)'},
  'Color styles.colors.yellow.1000': {default: 'rgb(76, 53, 10)'},
  'Effect styles.shadow.lg': {
    default: [
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 4,
        color: 'rgba(0, 0, 0, 0.05)',
        blurRadius: 6,
        spreadRadius: -4,
      },
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 10,
        color: 'rgba(0, 0, 0, 0.1)',
        blurRadius: 15,
        spreadRadius: -3,
      },
    ],
  },
  'Effect styles.shadow.md': {
    default: [
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 2,
        color: 'rgba(0, 0, 0, 0.06)',
        blurRadius: 4,
        spreadRadius: -2,
      },
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 4,
        color: 'rgba(0, 0, 0, 0.1)',
        blurRadius: 6,
        spreadRadius: -1,
      },
    ],
  },
  'Effect styles.shadow.sm': {
    default: [
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 1,
        color: 'rgba(0, 0, 0, 0.06)',
        blurRadius: 2,
        spreadRadius: 0,
      },
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 1,
        color: 'rgba(0, 0, 0, 0.1)',
        blurRadius: 3,
        spreadRadius: 0,
      },
    ],
  },
  'Effect styles.shadow.xl': {
    default: [
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 8,
        color: 'rgba(0, 0, 0, 0.04)',
        blurRadius: 10,
        spreadRadius: -6,
      },
      {
        type: 'outer',
        offsetX: 0,
        offsetY: 20,
        color: 'rgba(0, 0, 0, 0.1)',
        blurRadius: 25,
        spreadRadius: -5,
      },
    ],
  },
  'Effect styles.shadow.none': {
    default: {
      type: 'outer',
      offsetX: 0,
      offsetY: 0,
      color: 'rgba(0, 0, 0, 0)',
      blurRadius: 0,
      spreadRadius: 0,
    },
  },
  'Effect styles.shadow.xs': {
    default: {
      type: 'outer',
      offsetX: 0,
      offsetY: 1,
      color: 'rgba(0, 0, 0, 0.05)',
      blurRadius: 2,
      spreadRadius: 0,
    },
  },
  'Text styles.typography.styles.body.lg': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'regular',
      fontSize: 18,
      textIndent: 0,
      lineHeight: 139.9999976158142,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.body.md': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'regular',
      fontSize: 16,
      textIndent: 0,
      lineHeight: 139.9999976158142,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.body.sm': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'regular',
      fontSize: 14,
      textIndent: 0,
      lineHeight: 139.9999976158142,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.body.xs': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'regular',
      fontSize: 12,
      textIndent: 0,
      lineHeight: 139.9999976158142,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.code.md': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Menlo',
      fontWeight: 'regular',
      fontSize: 14,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.code.sm': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Menlo',
      fontWeight: 'regular',
      fontSize: 12,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.display.lg': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'bold',
      fontSize: 60,
      textIndent: 0,
      lineHeight: 100,
      letterSpacing: -0.4000000059604645,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.display.md': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'bold',
      fontSize: 48,
      textIndent: 0,
      lineHeight: 100,
      letterSpacing: -0.4000000059604645,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.display.sm': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'bold',
      fontSize: 36,
      textIndent: 0,
      lineHeight: 100,
      letterSpacing: -0.4000000059604645,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.display.xl': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'bold',
      fontSize: 72,
      textIndent: 0,
      lineHeight: 100,
      letterSpacing: -0.4000000059604645,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.heading.h1': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'bold',
      fontSize: 36,
      textIndent: 0,
      lineHeight: 100,
      letterSpacing: -0.4000000059604645,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.heading.h2': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'bold',
      fontSize: 30,
      textIndent: 0,
      lineHeight: 100,
      letterSpacing: -0.4000000059604645,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.heading.h3': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'semi-bold',
      fontSize: 24,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.heading.h4': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'semi-bold',
      fontSize: 20,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.heading.h5': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'semi-bold',
      fontSize: 18,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.heading.h6': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'semi-bold',
      fontSize: 16,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.label.lg': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'medium',
      fontSize: 16,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.label.md': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'medium',
      fontSize: 14,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.label.sm': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'medium',
      fontSize: 12,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
  'Text styles.typography.styles.label.xs': {
    default: {
      fontStyle: 'normal',
      fontFamily: 'Effra Trial',
      fontWeight: 'medium',
      fontSize: 10,
      textIndent: 0,
      lineHeight: 120.00000476837158,
      letterSpacing: 0,
      textTransform: 'none',
      textDecoration: 'none',
    },
  },
});

/**
* Retrieve any token for a given mode.
* @template {AllPath} Path - A generic extending all the possible paths
* @template {Tokens[Path] extends Record<string, any>
    ? keyof Tokens[Path]
    : undefined} Mode - A generic representing all the valid modes for a given path
* @template {Tokens[Path] extends Record<string, any>
    ? Tokens[Path][Mode extends undefined ? never : Mode]
    : Tokens[Path]} Return - The return type
* @param {Path} path - The path to the token
* @param {Mode} mode - The mode of the token you want to retrieve
* @returns {Return} - The value of a token for a given mode
*/
export function getTokenByMode(path, mode) {
  if (!tokens[path]) {
    throw new Error(
      "Path: '" +
        path +
        "' doesn't exist. Here are all the valid paths:\n- " +
        Object.keys(tokens).join('\n- '),
    );
  }

  if (typeof tokens[path] !== 'object') {
    return tokens[path];
  }

  if (!mode)
    throw new Error(
      'Mode is undefined but it should be one of ' +
        Object.keys(tokens[path]).join(', ') +
        ' for path: ' +
        path,
    );

  if (!tokens[path][mode]) {
    throw new Error(
      "Invalid mode '" +
        mode.toString() +
        "' at path '" +
        path +
        "', here are all the valid modes:\n- " +
        Object.keys(tokens[path]).join('\n- '),
    );
  }

  return tokens[path][mode];
}

/**
 * Retrieve any token with its modes.
 * @template {AllPath} Path - A generic extending all the possible paths
 * @param {Path} path - The path to the token
 * @returns {Tokens[Path]} - The value of a token with its modes
 */
export function getTokenWithModes(path) {
  if (!tokens[path]) {
    throw new Error(
      "Path: '" +
        path +
        "' doesn't exist. Here are all the valid paths:\n- " +
        Object.keys(tokens).join('\n- '),
    );
  }

  return tokens[path];
}

/**
 * Retrieve all the tokens for a specific type (color, dimension, etc...).
 * Note that the value will either be a string or an object if the token has modes
 * @template {keyof PathsByType} Type - A generic extending all the possible types
 * @template {Tokens[PathsByType[Type][number]]} Token - A generic representing a union of all the outputs
 * @param {Type} type - The path to the token
 * @returns {{ [Path in PathsByType[Type][number]]: Tokens[Path] }} - An array with all the values
 */
export function getTokensByType(type) {
  if (!pathsByType[type]) {
    throw new Error("The type: '" + type + "' does not exist");
  }

  return pathsByType[type].reduce((acc, path) => {
    // @ts-expect-error - Can't cast `path` to `Path`
    acc[path] = tokens[path];
    return acc;
  }, {});
}

/**
 * @typedef {T extends T ? keyof T : never} KeysOfUnion<T>
 * @template T
 */

/**
 * @typedef {T[keyof T]} IndexSelf<T>
 * @template T
 */

/**
 * @typedef {IndexSelf<{ [Path in keyof Tokens]: Tokens[Path] extends { [key in Mode]: any } ? Path : never; }>} ValidPathsFromMode<Mode>
 * @template {string} Mode
 */

/**
 * @template {KeysOfUnion<Tokens[keyof Tokens]>} Mode
 * @param {Mode} mode - Any valid mode
 * @returns - A function that takes a token path which has the given mode
 */
export function withMode(mode) {
  /**
   * @template {ValidPathsFromMode<Mode>} Path
   * @template {Extract<keyof Tokens[Path], Mode>} ValidMode
   * @param {Path} path - A valid path for the given mode
   * @returns {Tokens[Path][ValidMode]}
   */
  return path => {
    if (!tokens[path]) {
      throw new Error("Invalid path: '" + path + "'");
    }

    if (!tokens[path][mode]) {
      throw new Error("Invalid mode: '" + mode + "' for path: '" + path + "'");
    }

    return tokens[path][mode];
  };
}
